% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by Neural Pattern Recognition app
% Created 29-Aug-2018 15:19:14
%
% This script assumes these variables are defined:
%
%   twogasXa - input data.
%   twogasYa - target data.

clc
clear

%time * 100
from = 5000; %starting point - 50 seconds
to = 25000; %ending point - 250 seconds
diff = to-from; %range

%loading first gas sample data
gA{1} = loadData('.\data1\B1_GEa_F100_R1.txt',from,to);
gA{2} = loadData('.\data1\B1_GEa_F100_R2.txt',from,to);
gA{3} = loadData('.\data1\B1_GEa_F100_R3.txt',from,to);
gA{4}= loadData('.\data1\B1_GEa_F100_R4.txt',from,to);
gA{5} = loadData('.\data1\B2_GEa_F100_R1.txt',from,to);
gA{6} = loadData('.\data1\B2_GEa_F100_R2.txt',from,to);
gA{7} = loadData('.\data1\B2_GEa_F100_R3.txt',from,to);
gA{8} = loadData('.\data1\B2_GEa_F100_R4.txt',from,to);
gA{9} = loadData('.\data1\B3_GEa_F100_R1.txt',from,to);
gA{10} = loadData('.\data1\B3_GEa_F100_R2.txt',from,to);
gA{11} = loadData('.\data1\B3_GEa_F100_R3.txt',from,to);
gA{12} = loadData('.\data1\B3_GEa_F100_R4.txt',from,to);
gA{13} = loadData('.\data1\B4_GEa_F100_R1.txt',from,to);
gA{14} = loadData('.\data1\B4_GEa_F100_R2.txt',from,to);

gA{15} = loadData('.\data1\B1_GEa_F090_R1.txt',from,to);
gA{16} = loadData('.\data1\B1_GEa_F090_R2.txt',from,to);
gA{17} = loadData('.\data1\B1_GEa_F090_R3.txt',from,to);
gA{18}= loadData('.\data1\B1_GEa_F090_R4.txt',from,to);
gA{19} = loadData('.\data1\B2_GEa_F090_R1.txt',from,to);
gA{20} = loadData('.\data1\B2_GEa_F090_R2.txt',from,to);
gA{21} = loadData('.\data1\B2_GEa_F090_R3.txt',from,to);
gA{22} = loadData('.\data1\B2_GEa_F090_R4.txt',from,to);
gA{23} = loadData('.\data1\B3_GEa_F090_R1.txt',from,to);
gA{24} = loadData('.\data1\B3_GEa_F090_R2.txt',from,to);
gA{25} = loadData('.\data1\B3_GEa_F090_R3.txt',from,to);
gA{26} = loadData('.\data1\B3_GEa_F090_R4.txt',from,to);
gA{27} = loadData('.\data1\B4_GEa_F090_R1.txt',from,to);
gA{28} = loadData('.\data1\B4_GEa_F090_R2.txt',from,to);

gA{29} = loadData('.\data1\B1_GEa_F080_R1.txt',from,to);
gA{30} = loadData('.\data1\B1_GEa_F080_R2.txt',from,to);
gA{31} = loadData('.\data1\B1_GEa_F080_R3.txt',from,to);
gA{32}= loadData('.\data1\B1_GEa_F080_R4.txt',from,to);
gA{33} = loadData('.\data1\B2_GEa_F080_R1.txt',from,to);
gA{34} = loadData('.\data1\B2_GEa_F080_R2.txt',from,to);
gA{35} = loadData('.\data1\B2_GEa_F080_R3.txt',from,to);
gA{36} = loadData('.\data1\B2_GEa_F080_R4.txt',from,to);
gA{37} = loadData('.\data1\B3_GEa_F080_R1.txt',from,to);
gA{38} = loadData('.\data1\B3_GEa_F080_R2.txt',from,to);
gA{39} = loadData('.\data1\B3_GEa_F080_R3.txt',from,to);
gA{40} = loadData('.\data1\B3_GEa_F080_R4.txt',from,to);
gA{41} = loadData('.\data1\B4_GEa_F080_R1.txt',from,to);
gA{42} = loadData('.\data1\B4_GEa_F080_R2.txt',from,to);

%load second gas sample data
gB{1} = loadData('.\data1\B1_GEy_F100_R1.txt',from,to);
gB{2} = loadData('.\data1\B1_GEy_F100_R2.txt',from,to);
gB{3} = loadData('.\data1\B1_GEy_F100_R3.txt',from,to);
gB{4} = loadData('.\data1\B1_GEy_F100_R4.txt',from,to);
gB{5} = loadData('.\data1\B2_GEy_F100_R1.txt',from,to);
gB{6} = loadData('.\data1\B2_GEy_F100_R2.txt',from,to);
gB{7} = loadData('.\data1\B2_GEy_F100_R3.txt',from,to);
gB{8} = loadData('.\data1\B2_GEy_F100_R4.txt',from,to);
gB{9} = loadData('.\data1\B3_GEy_F100_R1.txt',from,to);
gB{10} = loadData('.\data1\B3_GEy_F100_R2.txt',from,to);
gB{11} = loadData('.\data1\B3_GEy_F100_R3.txt',from,to);
gB{12} = loadData('.\data1\B3_GEy_F100_R4.txt',from,to);
gB{13} = loadData('.\data1\B4_GEy_F100_R1.txt',from,to);
gB{14} = loadData('.\data1\B4_GEy_F100_R2.txt',from,to);

gB{15} = loadData('.\data1\B1_GEy_F090_R1.txt',from,to);
gB{16} = loadData('.\data1\B1_GEy_F090_R2.txt',from,to);
gB{17} = loadData('.\data1\B1_GEy_F090_R3.txt',from,to);
gB{18}= loadData('.\data1\B1_GEy_F090_R4.txt',from,to);
gB{19} = loadData('.\data1\B2_GEy_F090_R1.txt',from,to);
gB{20} = loadData('.\data1\B2_GEy_F090_R2.txt',from,to);
gB{21} = loadData('.\data1\B2_GEy_F090_R3.txt',from,to);
gB{22} = loadData('.\data1\B2_GEy_F090_R4.txt',from,to);
gB{23} = loadData('.\data1\B3_GEy_F090_R1.txt',from,to);
gB{24} = loadData('.\data1\B3_GEy_F090_R2.txt',from,to);
gB{25} = loadData('.\data1\B3_GEy_F090_R3.txt',from,to);
gB{26} = loadData('.\data1\B3_GEy_F090_R4.txt',from,to);
gB{27} = loadData('.\data1\B4_GEy_F090_R1.txt',from,to);
gB{28} = loadData('.\data1\B4_GEy_F090_R2.txt',from,to);
gB{29} = loadData('.\data1\B1_GEy_F080_R1.txt',from,to);
gB{30} = loadData('.\data1\B1_GEy_F080_R2.txt',from,to);
gB{31} = loadData('.\data1\B1_GEy_F080_R3.txt',from,to);
gB{32}= loadData('.\data1\B1_GEy_F080_R4.txt',from,to);
gB{33} = loadData('.\data1\B2_GEy_F080_R1.txt',from,to);
gB{34} = loadData('.\data1\B2_GEy_F080_R2.txt',from,to);
gB{35} = loadData('.\data1\B2_GEy_F080_R3.txt',from,to);
gB{36} = loadData('.\data1\B2_GEy_F080_R4.txt',from,to);
gB{37} = loadData('.\data1\B3_GEy_F080_R1.txt',from,to);
gB{38} = loadData('.\data1\B3_GEy_F080_R2.txt',from,to);
gB{39} = loadData('.\data1\B3_GEy_F080_R3.txt',from,to);
gB{40} = loadData('.\data1\B3_GEy_F080_R4.txt',from,to);
gB{41} = loadData('.\data1\B4_GEy_F080_R1.txt',from,to);
gB{42} = loadData('.\data1\B4_GEy_F080_R2.txt',from,to);

%number of total samples
szgasA = size(gA(1,1:end));
szgasB = size(gB(1,1:end));

%normalize all points
ppm100Gas = vertcat(gA{1,1:end},gB{1,1:end});
norm100 = normalizeGasData(ppm100Gas);

%number of samples in each batch
numOfSamp = 10;
freq = diff/numOfSamp; %how often we take samples

%sample gas A
for(i=0:szgasA(2)-1)
s100A{i+1} = sampleMat(norm100((i)*diff+1:(i+1)*diff,:),freq,numOfSamp);
end

%sample gas B
for(i=szgasB(2):szgasA(2)+szgasB(2)-1)
s100B{i-(szgasA(2)-1)} = sampleMat(norm100((i)*diff+1:(i+1)*diff,:),freq,numOfSamp);
end

allS = vertcat(s100A{1,1:end},s100B{1,1:end});
szAll = size(allS);
szA = [szAll(1)/2 9];
szB = [szAll(1)/2 9];

%put actual y label
v = [1];
va = repelem(v,szA(1))';

w = [-1];
wa = repelem(w,szB(1))';

y = vertcat(va,wa);

%intialize data points
X(1:szAll(1),1:2)=0;

%sensors used
sA=4;
sB=9;

%set x values, 3rd column is constant -1 for bias term, so bias does not
%change in weight calculation during SGD algo
for (j=1:szAll(1))
    X(j,1) = allS(j,sA);
    X(j,2) = allS(j,sB);
end

twogasXa = X';


v = [1];
va = repelem(v,szA(1));

w = [0];
wa = repelem(w,szA(1));

u = vertcat(va,wa);

v = [0];
va = repelem(v,szA(1));

w = [1];
wa = repelem(w,szA(1));

t =  vertcat(va,wa);

twogasYa = horzcat(u,t);



%my code end




x = twogasXa;
t = twogasYa;

% Choose a Training Function
% For a list of all training functions type: help nntrain
% 'trainlm' is usually fastest.
% 'trainbr' takes longer but may be better for challenging problems.
% 'trainscg' uses less memory. Suitable in low memory situations.
trainFcn = 'trainscg';  % Scaled conjugate gradient backpropagation.

% Create a Pattern Recognition Network
hiddenLayerSize = 10;
net = patternnet(hiddenLayerSize, trainFcn);

% Choose Input and Output Pre/Post-Processing Functions
% For a list of all processing functions type: help nnprocess
net.input.processFcns = {'removeconstantrows','mapminmax'};

% Setup Division of Data for Training, Validation, Testing
% For a list of all data division functions type: help nndivision
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;

% Choose a Performance Function
% For a list of all performance functions type: help nnperformance
net.performFcn = 'crossentropy';  % Cross-Entropy

% Choose Plot Functions
% For a list of all plot functions type: help nnplot
net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
    'plotconfusion', 'plotroc'};

% Train the Network
tic
[net,tr] = train(net,x,t);
toc 

% Test the Network
y = net(x);
e = gsubtract(t,y);
performance = perform(net,t,y)
tind = vec2ind(t);
yind = vec2ind(y);
percentErrors = sum(tind ~= yind)/numel(tind);

% Recalculate Training, Validation and Test Performance
trainTargets = t .* tr.trainMask{1};
valTargets = t .* tr.valMask{1};
testTargets = t .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,y)
valPerformance = perform(net,valTargets,y)
testPerformance = perform(net,testTargets,y)

% View the Network
view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, ploterrhist(e)
%figure, plotconfusion(t,y)
%figure, plotroc(t,y)

% Deployment
% Change the (false) values to (true) to enable the following code blocks.
% See the help for each generation function for more information.
if (false)
    % Generate MATLAB function for neural network for application
    % deployment in MATLAB scripts or with MATLAB Compiler and Builder
    % tools, or simply to examine the calculations your trained neural
    % network performs.
    genFunction(net,'myNeuralNetworkFunction');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a matrix-only MATLAB function for neural network code
    % generation with MATLAB Coder tools.
    genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
    y = myNeuralNetworkFunction(x);
end
if (false)
    % Generate a Simulink diagram for simulation or deployment with.
    % Simulink Coder tools.
    gensim(net);
end


function [partMat] = loadData(file,from,to)
data = importdata(file,' ');
partMat = data(from:to,:);
end


function [J] = sampleMat(mat,inc,sampSize) %sample from a matrix
    szData = size(mat);
    S = zeros(9,sampSize);
    
    for(h=2:9)
        numOfSamp = 1;
        for(i=1:inc:szData(1))
            if(numOfSamp < (sampSize+1))
                S(h,numOfSamp) = mat(i,h);  
                numOfSamp = numOfSamp + 1;  
            end
        end
    end
    J = S';
end

function [normMat] = normalizeGasData(mat) %normalize data
    matx = mat(:,2:end);
    N = matx- min(matx);
    De = max(matx)- min(matx);
    normMatx = N./De;
    normMat = [mat(:,1) normMatx]; 
end
